@startuml 
title Diagrama de Clases Gym

' ------ PAQUETE: Personas & Seguridad ----------
package "Personas & Seguridad" {
  class Person{
    - names: String
    - lastNames: String
    - id: int
    - typeId: TypeId
    - dateBirth: Date
    - numberPhone: String
  }

  enum TypeId{
    C.C
    T.I
    C.E
  }

  class Customer{
    - weight: int
    - stature: int
    - trainingPlan: TrainingPlan
    - anamnesis: Anamnesis
    - List<TrainingSession> trainingSessionList
    + addTrainingSession(TrainingSession): void
  }

  class User{
    - userName: String
    - idUser: int
  }

  class AdminRole{
  }

  class StaffRole{
  }

  class PermissionManager  {
    +boolean hasPermission(User user, Permission permission)
  }

  enum Permission {
    CREATE
    READ
    UPDATE
    DELETE
    VIEW_REPORTS
    PROCESS_SALES
  }
  
  class Role{
    -List<Permission> PermissionList
  }

  ' --- Relaciones del paquete ---
  Person <|-- User
  Person <|-- Customer
  Person --> TypeId
  Role --> Permission
  PermissionManager --> User
  Customer o-- TrainingPlan
  Customer "1" -- "*" TrainingSession : sessions
  Customer o-- Anamnesis
  Anamnesis "1"--> "0..*"Anamnesis
  User *-- Role
  Role <|-- AdminRole
  Role <|-- StaffRole
}

' ------ PAQUETE: Clientes & Entrenamiento ----------

package "Clientes & Entrenamiento" {
  class TrainingPlan {
    - id: int
    - objective: String
    - notes: String
    -List<Routine> routines
  }

  class Routine {
    - id: int
    - routineName: String
    - focusArea: String
    - durationMin: int
    - notes: String
    - startTime: String
    - endTime: String
    -List<Exercise> exercises 
  }

  class Exercise {
    - id: int
    - name: String
    - description: String
    - sets: int
    - repetitions: int
  }

  interface IBuilder {
    +build(): TrainingPlan
  }

  interface TrainingPlanBuilder <<Builder>> {
    +setId(id: int): TrainingPlanBuilder
    +setObjective(objective: String): TrainingPlanBuilder
    +setNotes(notes: String): TrainingPlanBuilder
    +addRoutine(routine: Routine): TrainingPlanBuilder
    +addRoutine(id: int, name: String, focusArea: String, durationMin: int, notes: String, startTime: String, endTime: String): TrainingPlanBuilder
    +addExerciseToRoutine(routineId: int, exercise: Exercise): TrainingPlanBuilder
    +addExerciseToRoutine(routineId: int, id: int, name: String, description: String, sets: int, repetitions: int): TrainingPlanBuilder
    +build(): TrainingPlan
  }

  note bottom of TrainingPlanBuilder
    Builder Pattern:
    Facilita la creación de TrainingPlan con múltiples atributos opcionales.
  end note

  ' Relaciones
  TrainingPlan "1" o-- "1..*" Routine
  Routine o-- Exercise
  TrainingPlan ..> TrainingPlanBuilder
  TrainingPlanBuilder --|> IBuilder
}

' ------ PAQUETE: Productos & Finanzas ----------
package "Productos & Finanzas" {
  abstract class Product{
    # name: String
    # purchasePrice: BigDecimal
    # salePrice: BigDecimal
    # description: String
    # productType: String  
    + {abstract} calculateProfit(): BigDecimal
    + getName(): String
    + getPurchasePrice(): BigDecimal
    + getSalePrice(): BigDecimal
    + getDescription(): String
    + getProductType(): String  
  }

  interface ProductFactory<T extends Product> <<Factory Method>> {
    + createProduct(name: String, purchasePrice: BigDecimal, salePrice: BigDecimal, description: String): T
  }

  note top of ProductFactory
    Factory Method:
    Encapsula la creación de productos evitando dependencias de clases concretas.
  end note

  class FactoryEdibleProduct implements ProductFactory {
    + createProduct(name, purchasePrice, salePrice, description): EdibleProduct
  }

  class EdibleProduct{
    - batch: String
    - expirationDate: LocalDate
    + calculateProfit(): BigDecimal
    + displayDetails(): void
  }

  class FactoryClothingProduct implements ProductFactory {
    + createProduct(name, purchasePrice, salePrice, description): ClothingProduct
  }

  class ClothingProduct{
    - size: String
    - color: String
    - material: String
    - style: String
    + calculateProfit(): BigDecimal
    + displayDetails(): void
  }

  ' class FactoryMembership implements ProductFactory {
  '   + createProduct(name, purchasePrice, salePrice, description): Membership
  ' }

  class Membership{
    - initDate: LocalDate
    - endDate: LocalDate
    - typeMembership: TypeMembership
    - value: BigDecimal
    - productList: ArrayList<Product>
    + calculateValue(): BigDecimal
    + addProduct(Product product)
    +getProductList(): ArrayList<Product>
  }

  enum TypeMembership{
    MENSUAL
    TRIMESTRAL 
    SEMESTRAL
    ANUAL
  }

  interface Gestion<T> {
    + create(T obj): void
    + read(id: int): T
    + update(T obj): void
    + delete(id: int): void
  }

  class InventoryGestion {
    + getTotalPurchaseValue(): BigDecimal
    + getTotalSaleValue(): BigDecimal
    + getProductCount(): int
    +getProductList(String name): ArrayList<Produc>
  }

  class CustomerGestion {
    + getCustomerCount(): int
  }

  class FinancialGestion {
    + generateReport(transactions: List<Transaction>): Report
  }

  class Transaction {
    - idTransaction: int
    - dateTransaction: LocalDateTime
    - user: User
    - customer: Customer
    - typeTransaction: TypeTransaction
    - value: BigDecimal
    - pay: Pay
    + Transaction()

  }

  enum TypeTransaction { 
    ENTRADA
    SALIDA 
  }

  enum Pay { 
    EFECTIVO
    TRANSACCION
    TARJETA_DEBITO
    TARJETA_CREDITO
  }

  class Report {
    - totalIncome: BigDecimal
    - totalExpense: BigDecimal
    - resume: String
    + generateResume(String list): String
  }

  ' --- Relaciones del paquete ---
  Product <|-- EdibleProduct
  Product <|-- ClothingProduct
  Customer o-- Membership
  Membership o-- Product
  FactoryEdibleProduct --> EdibleProduct
  FactoryClothingProduct --> ClothingProduct
  ' FactoryMembership --> Membership
  Report o-- Transaction
  Gestion <|.. InventoryGestion
  Gestion <|.. CustomerGestion
  Gestion <|.. FinancialGestion
  Transaction --> TypeTransaction
  Transaction --> Pay
  InventoryGestion --> Product
  CustomerGestion --> Customer
  FinancialGestion --> Transaction
  Membership --> TypeMembership
  PermissionManager --> Gestion
 
}

' ------ RELACIONES GLOBALES/CRUZADAS ----------
' (Se mantienen fuera de paquetes específicos)
skinparam classAttributeIconSize 8
skinparam classFontSize 16
skinparam classFontName "Arial"
skinparam classBorderColor #212837
skinparam classHeaderFontColor #FFFFFF
skinparam classHeaderBackgroundColor #8BB9E6
skinparam classArrowColor #6E95C2
skinparam linetype ortho

@enduml