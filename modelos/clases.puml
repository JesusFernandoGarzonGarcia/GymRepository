@startuml
title Diagrama de Clases Gym
'! FALTA VERIFICAR COMO SE LE ASIGNAN LAS GESTIONES A 
'! LOS USUARIOS 
'!AGREGAR ATRIBUTOS Y MÉTODOS NECESARIOS A ADMIN, ASISTANT
'! AGREGAR GETTERS SETTERS Y CONSTRUCTORES A TODAS LAS QUE FALTEN
'! AGREGAR CARDINALIDADES

' ----- CLASES ----------
class Person{
    -String names
    -String lastNames
    -int id
    -TypeId TypeId
    -Date dateBirth
    -String numberPhone
}
enum TypeId{
    C.C
    T.I
    C.E
}
enum Permission {
    CREATE
    READ
    UPDATE
    DELETE
    VIEW_REPORTS
    PROCESS_SALES
}
class PermissionManager {
    +boolean hasPermission(User user, Permission permission)
    +boolean canCreate(User user)
    +boolean canRead(User user)
    +boolean canUpdate(User user)
    +boolean canDelete(User user)
    +boolean canProcessSales(User user)
    +boolean canViewReports(User user)
}
class Customer{
    -int weight
    -int stature
    -TrainingPlan TrainingPlan
    -Anamnesis Anamnesis
    -List<TrainingSesion> trainingSesionList
    +addTrainingSesion(TrainingSesion)
}
class User{
    -String userName
    -int idUser

}
class Anamnesis{
    -Detail detail
}
class Detail{
    #id
    -String description

}
class Membership{
    -Date initDate
    -Date endDate
    -TypeMembership TypeMembership
    -int value
    -calculateValue()
}

enum TypeMembership{
    MENSUAL
    TRIMESTRAL 
    SEMESTRAL
    ANUAL

}
class TrainingPlan{

  -int id
  -String objective
  -boolean isActive
  -String notes
  -List<Routine> routineList
  + addRoutine(routine: Routine): void
  + removeRoutine(routine: Routine): void
  + getDuration(): int
  + activate(): void
  + deactivate(): void
  + isCurrentlyActive(): boolean
  + listRoutines(): List<Routine>
}


class Routine{
    -int id
    -String routineName
    -String focusArea
    -int durationMinutesAprox
    -String notes
    -List<Exercise> exerciseList
    + addExercise(exercise: Exercise): void
    + removeExercise(exercise: Exercise): void
    + getTotalExercises(): int
    + listExercises(): List<Exercise>
    + summarize(): String
}
class Exercise{
    id: int
  - name: String
  - description: String
  - sets: int
  - repetitions: int

}
class TrainingSession{
    Date startTime
    Date endTime

}
class Admin{

}
class Asistant{

}
abstract class IProduct{
      - name: String
  - purchasePrice: float
  - salePrice: float
  - description: String
  - productType: String
  
  + Product(name: String, purchasePrice: float, salePrice: float, description: String)
  + getName(): String
  + getPurchasePrice(): float
  + getSalePrice(): float
  + getDescription(): String
  + getProductType(): String
  + calculateProfit(): float

}
class EdibleProduct{
- String batch
    - String expirationDate
    + EdibleProduct(String name, double purchasePrice,
     double salePrice, String description, String batch, String expirationDate)
    + void displayDetails()
}
class ClothingProduct{
 - String size
    - String color
    - String material
    - String style
    + ClothingProduct(String name, double purchasePrice,
     double salePrice, String description, String size, String color, String material, String style)
    + void displayDetails()
}
interface Ifactory{
    + Product createProduct(String name, double purchasePrice, 
    double salePrice, String description)
}
class FactoryEdibleProduct{
}
class FactoryClothingProduct{

}
class InventaryGestion{
    +getValuePurchaseTotal(): int
    +getValueSaleTotal():int
    +getCountTotalProduct():int

}
class CustomerGestion{
    +getCountCustomer():int
}
class FinancialGestion{
    +generateReport(List<Transaction> transactionList):Report
}
interface Gestion<T> {
    + void create(T obj)
    + T read(int id)
    + void update(T obj)
    + void delete(int id)
}
class Transaction{
    -int idTransaction
    -Date dateTransaction
    -User user
    -Customer Customer
    -TypeTransaction typeTransaction
    - int value
    - Pay pay


}

enum TypeTransaction{
    ENTRADA
    SALIDA
}
enum Pay{
    EFECTIVO
    TRANSACCION 
    TARJETA DÉBITO
    TARJETA CRÉDITO
}

class Report{
    - int TotalIncome
    - int totalExpense
}
'------ RELACIONES ---------
Person <|-- User
Person <|-- Customer
User <|-- Asistant
User <|-- Admin
Ifactory <|.. FactoryClothingProduct
Ifactory <|.. FactoryEdibleProduct
IProduct <|-- EdibleProduct
IProduct <|-- ClothingProduct
Gestion <|.. InventaryGestion
Gestion <|.. CustomerGestion
Gestion <|.. FinancialGestion
Customer o-- Anamnesis
Customer o-- Membership
Customer o-- TrainingPlan
Customer o-- TrainingSession
TrainingPlan o-- Routine
Report o-- Transaction
Routine o-- Exercise
Anamnesis *-- Detail
Detail*-- Detail
FactoryEdibleProduct --> EdibleProduct
FactoryClothingProduct --> ClothingProduct
InventaryGestion --> IProduct
CustomerGestion --> Customer

FinancialGestion --> Transaction
Transaction --> User
Transaction --> Customer
Transaction --> IProduct
Transaction --> Membership
Person --> TypeId
Membership --> TypeMembership
Transaction --> Pay
Transaction --> TypeTransaction

PermissionManager --> Permission
PermissionManager --> User
PermissionManager --> Gestion




' Definir la apariencia general
skinparam classAttributeIconSize 8
skinparam classFontSize 16
skinparam classFontName "Arial"
skinparam classBorderColor #212837
skinparam classHeaderFontColor #FFFFFF
skinparam classHeaderBackgroundColor #8BB9E6
skinparam classArrowColor #6E95C2
skinparam linetype ortho

' k
@enduml